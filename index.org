#+title: Deep FTR Option Pricing
#+author: Matt Brigida, Ph.D.
#+PROPERTY: header-args :eval yes
#+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-readtheorg.setup
#+HTML_HEAD: <style>pre.src{background:#343131;color:white;} </style>


#+begin_comment
[[https://arxiv.org/pdf/1809.02233.pdf][Here is the paper.]]

[[https://developer.nvidia.com/blog/accelerating-python-for-exotic-option-pricing/][Here is the NVIDIA blog article.]]
#+end_comment


* Generate Training Data via Monte Carlo


** Monte Carlo Assumptions

We will assume electricity prices are generated by the following stochastic differential equation:

$$dE_t = \kappa(r_f - E_t) d_t + \sigma E_t dB_t$$

Each FTR option derives its value from the price process of electricity at two points (the sink and the source).  We therefore generate correlated price processes for each FTR option.

To generate bivariate normally distributed changes in Brownian Motions ($dB_t$) we first sample two independent standard normal random variables, denoted $Z_1$ and $Z_2$, and then set:

$dB_{sink,t} = r_f + \sigma_{sink}Z_1$

$dB_{source,t} = r_f + \sigma_{source} \rho Z_1 + \sigma_{source} \sqrt{1-\rho^2} Z_2$

#+caption: Parameters generated for the Monte Carlo simulation.
|----------------------------+----------+--------+--------------------|
| Parameter                  | Symbol   | Number | Distribution       |
|----------------------------+----------+--------+--------------------|
| Forward Electricity Prices | E        |      2 | Simulated          |
| Volatility                 | $\sigma$ |      2 | Uniform(0.01, 1)   |
| Correlation                | $\rho$   |      1 | Uniform(-0.5, 0.5) |
| Mean reversion             | $\kappa$ |      2 | Uniform(0.01, .8)  |
| Maturity                   | $T$      |      1 | 1 year             |
| risk-free                  | $r_f$    |      1 | Uniform(0.01, 0.1) |
|----------------------------+----------+--------+--------------------|

** Monte Carlo Code

We'll use Numba to run the Monte Carlo in parallel on a GPU.

#+begin_src python :session *mc* :exports none :results none
import numpy as np
from numba import cuda
#+end_src

#+name: mc_code
#+begin_src python :session *mc*
cuda.jit
def FTR_Option(d_s, T, k, B, S0, sigma, rf, d_normals, N_STEPS, N_PATHS):
    
#+end_src



* Train Neural Network on Generated Data



* Validate Against FTR Auction Results


FTR price data is from here: https://www.pjm.com/-/media/markets-ops/ftr/annual-ftr-auction/2023-2024/2023-2024-annual-auction-round-4-results.ashx

#+begin_src python :session *py* :exports code :results nil
import pandas as pd
option_data = pd.read_csv("./csvs/option_data.csv")
lmp_data = pd.read_csv("./csvs/lmp_data.csv")
option_path_data = pd.read_csv("./csvs/option_path_data.csv")
#+end_src

#+RESULTS:


#+begin_src python :session *py* :exports code :results nil
#+end_src

#+RESULTS:
: 0                            1.448716e+03
: Source PNODEID               4.766272e+08
: Sink PNODEID                 2.611426e+08
: Option MCP_24H               1.665083e+04
: Option MCP_On Peak           1.045194e+04
: Option MCP_Off Peak          6.432980e+03
: Option MCP_Wknd On Peak      3.174125e+03
: Option MCP_Daily Off Peak    3.419757e+03
: dtype: float64
